@inject UserService UserService;
@using USIMentorshipWebApp.Data
@using USIMentorshipWebApp.Models;

@* Note on the data shown *@
<RadzenStack Orientation="Orientation.Vertical">
    <RadzenStack Orientation="Orientation.Horizontal">
        @* COUNTRY DROPDOWN *@
        <div class="our-column mb-2">
            <label>Business Country:</label>
            <RadzenDropDown @bind-SearchText=@countriesSearchText FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.StartsWith" AllowFiltering="true"
                            Data=@countries TextProperty="CountryName" ValueProperty="CountryCode" Change="@(args => CountryChanged(args))"
                            AllowClear="true" @bind-Value=@countrySelected Style="width: 100%; max-width: 220px;" />
        </div>

        @* STATE DROPDOWN *@
        <div class="our-column mb-2">
            <label>Business State:</label>
            <RadzenDropDown @bind-SearchText=@stateSearchText FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.StartsWith" AllowFiltering="true"
                            TextProperty="StateName" Data=@states Disabled=@stateDropdownDisabled Change="@(args => StateChanged(args))" 
                            ValueProperty="StateCode" AllowClear="true" @bind-Value=@stateSelected Style="width: 100%; max-width: 220px;" />
        </div>

        @* CITY DROPDOWN *@
        <div class="our-column mb-2">
            <label>Business City:</label>
            <RadzenDropDown @bind-SearchText=@citySearchText FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.StartsWith" AllowFiltering="true"
                            Data=@cities Disabled=@cityDropdownDisabled TextProperty="CityName" ValueProperty="CityId" Change="@CityChanged" AllowClear="true" @bind-Value=@citySelected Style="width: 100%; max-width: 220px;" />
        </div>
    </RadzenStack>
    <label>Note: City and State data only shows for United States. Puerto Rican cities also supported.</label>
</RadzenStack>

@code {
    private UsiMentorshipApplicationContext _context = new UsiMentorshipApplicationContext();

    // countries variables
    public List<Country> countries;
    public string countriesSearchText;
    public string countrySelected;

    // states variables
    public bool stateDropdownDisabled = true;
    public List<State> states;
    public string stateSearchText;
    public string stateSelected;

    // cities variables
    public bool cityDropdownDisabled = true;
    public int citySelected;
    public List<City> cities;
    public string citySearchText;


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        countries = _context.Countries.ToList();
    }

    // this is triggered when the selected value changes and args is the newly selected value
    void StateChanged(object value)
    {
        // disable the city dropdown when state is cleared 
        if (stateSelected == null)
        {
            cityDropdownDisabled = true;
            citySelected = 0;
        }
        // converts the value variable to a string
        stateSelected = (string)value;
        cities = _context.Cities.Where(c => c.StateCode == stateSelected).ToList();
        // .Any() returns if there are any cities in the collection, returns true if so
        cityDropdownDisabled = !cities.Any();
    }

    // this is triggered when the selected value changes and args is the newly selected value
    void CountryChanged(object value)
    {
        // disable the city and state dropdown if country is cleared and clear other dropdowns
        if (countrySelected == null)
        {
            citySelected = 0;
            stateSelected = "";
            stateDropdownDisabled = true;
            cityDropdownDisabled = true;
        }

        // converts the value variable to a string 
        countrySelected = (string)value;
        states = _context.States.Where(c => c.CountryCode == countrySelected).ToList();
        // .Any() returns if there are any cities in the cities, returns true if so
        stateDropdownDisabled = !states.Any();
    }

    void CityChanged(object value)
    {
        
        //city = _context.States.Where(c => c.CountryCode == countrySelected).ToList();
        
    }
}