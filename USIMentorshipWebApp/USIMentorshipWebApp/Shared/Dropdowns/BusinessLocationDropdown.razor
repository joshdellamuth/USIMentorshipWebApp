@inject UserService UserService;
@inject RegistrationDataService registrationDataService;
@using USIMentorshipWebApp.Data
@using USIMentorshipWebApp.Models;

@* Note on the data shown *@
<RadzenStack Orientation="Orientation.Vertical">
    <RadzenStack Orientation="Orientation.Horizontal">
        @* COUNTRY DROPDOWN *@
        <div class="our-column mb-2">
            <label>Business Country:</label>
            <RadzenDropDown @bind-SearchText=@countriesSearchText FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.StartsWith" AllowFiltering="true"
                            Data=@countries Change="@(args => CountryChanged(args))"
                            AllowClear="true" @bind-Value=@countrySelected Style="width: 100%; max-width: 220px;" />
        </div>

        @* STATE DROPDOWN *@
        <div class="our-column mb-2">
            <label>Business State/Providence:</label>
            <RadzenDropDown @bind-SearchText=@stateSearchText FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.StartsWith" AllowFiltering="true"
                            Data=@states Disabled=@stateDropdownDisabled Change="@(args => StateChanged(args))" 
                            AllowClear="true" @bind-Value=@stateSelected Style="width: 100%; max-width: 220px;" />
        </div>

        @* CITY DROPDOWN *@
        <div class="our-column mb-2">
            <label>Business City:</label>
            <RadzenDropDown @bind-SearchText=@citySearchText FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.StartsWith" AllowFiltering="true"
                            Data=@cities Disabled=@cityDropdownDisabled Change="@CityChanged" AllowClear="true" @bind-Value=@citySelected Style="width: 100%; max-width: 220px;" />
        </div>
    </RadzenStack>
    <label>Note: City and State data only shows for United States. Puerto Rican cities also supported.</label>
</RadzenStack>

@code {
    private UsiMentorshipApplicationContext _context = new UsiMentorshipApplicationContext();

    // countries variables
    public List<string>? countries;
    public string? countriesSearchText;
    public string? countrySelected;

    // states variables
    public bool stateDropdownDisabled = true;

    public List<string>? states;
    public string? stateSearchText;
    public string? stateSelected;

    // cities variables
    public bool cityDropdownDisabled = true;
    public string? citySelected;
    public List<string>? cities;
    public string? citySearchText;


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        countries = await registrationDataService.GetAllCountriesAsync();
    }

    // this is triggered when the selected value changes and args is the newly selected value
    public async Task CountryChanged(object value)
    {
        stateSelected = null;
        citySelected = null;
        stateDropdownDisabled = true;
        cityDropdownDisabled = true;
        // disable the city and state dropdown if country is cleared and clear other dropdowns
        if (countrySelected == null)
        {
            // set everything to null and disable the dropdowns
            stateSelected = null;
            citySelected = null;
            stateDropdownDisabled = true;
            cityDropdownDisabled = true;
        }

        else
        {
            // get the states in the country
            var countryStates = await registrationDataService.GetStatesByCountryAsync(countrySelected);

            // see if country states was null
            if (countryStates.Count == 0)
            {
                // if it is, deactivate states dropdown and activate the cites and set cities to the get country by cities
                stateDropdownDisabled = true;
                stateSelected = null;
                cityDropdownDisabled = false;
                cities = await registrationDataService.GetCityByCountryAsync(countrySelected);
            }
            else
            {
                states = countryStates;
                stateDropdownDisabled = false;
            }
        }
    }

    // this is triggered when the selected value changes and args is the newly selected value
    public async Task StateChanged(object value)
    {
        citySelected = null;
        cityDropdownDisabled = true;
        if (stateSelected != null)
        {
            var stateCites = await registrationDataService.GetCityByStateAndCountryAsync(countrySelected, stateSelected);
            if (stateCites.Count == 0)
            {
                cityDropdownDisabled = true;
                citySelected = null;
            }
            else
            {
                cityDropdownDisabled = false;
                cities = stateCites;
            }
        }
        else
        {
            cityDropdownDisabled = true;
            citySelected = null;
        }
    }

    public async Task CityChanged(object value)
    {
                
    }
}