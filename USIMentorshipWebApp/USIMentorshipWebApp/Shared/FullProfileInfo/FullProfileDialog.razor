@using USIMentorshipWebApp.Data;
@using USIMentorshipWebApp.Models;
@using USIMentorshipWebApp.Shared.RequestMentorship
@inject ChatService chatService
@inject NavigationManager NavigationManager
@inject UserService userService
@inject SessionService sessionService

<div class="height-scrollable">
<RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Start" Gap=".5rem" Class="rz-p-2">
    @* PROFILE PICTURE *@
    <RadzenStack Orientation="Orientation.Vertical" Style="width:180px;">
        <RadzenImage Path=@Mentor.ProfilePicture Style="width: 180px; height: 180px; border-radius: 50%;"/>
        
        @* MAJOR *@
        <RadzenText TextStyle="TextStyle.Overline" class="rz-mt-1 rz-my-0 rz-text-wrap">Major</RadzenText>
        <RadzenText TextStyle="TextStyle.Body1"><b>@Mentor.Major</b></RadzenText>

        @* CURRENT POSITION *@
        @if (Mentor.CurrentPosition != null)
        {
            <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-text-wrap rz-mt-1 rz-my-0">Current Position</RadzenText>
            <RadzenText TextStyle="TextStyle.Body1"><b>@Mentor.CurrentPosition</b></RadzenText>
        }

        @* CURRENT POSITION *@
        @if (Mentor.EmailAddress != null)
        {
            <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-text-wrap rz-mt-1 rz-my-0">Email</RadzenText>
            <RadzenText TextStyle="TextStyle.Body1"><b>@Mentor.EmailAddress</b></RadzenText>
        }

    </RadzenStack>
    @* Gap is the size of the gap between the child items of RadzenStack *@
    <RadzenStack Orientation="Orientation.Vertical" Gap="4">
        @* rz-display-flex puts the text in a flexible layout*@
        @* rz-mt-2 applies a margin of value 2 to the top of the text *@
        @* rz-my-0 applies the vertical margin of 0 to the top and bottom margin (removes the margins on top and bottom) *@
        @* NAME *@
        <RadzenText TextStyle="TextStyle.Overline" class="rz-text-wrap rz-display-flex rz-mt-1 rz-my-0">Mentor Name</RadzenText>
        <RadzenText TextStyle="TextStyle.Body1"><b>@(Mentor.FirstName + " " + Mentor.LastName)</b></RadzenText>

        @* GENDER *@
        @if (Mentor.Gender != null)
        {
            <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-text-wrap rz-mt-1 rz-my-0">Gender</RadzenText>
            <RadzenText TextStyle="TextStyle.Body1"><b>@Mentor.Gender</b></RadzenText>
        }

        @* SCHOOL *@
        @if (Mentor.School != null)
        {
            <RadzenText TextStyle="TextStyle.Overline" class="rz-text-wrap rz-mt-1 rz-mb-0">School</RadzenText>
            <RadzenText TextStyle="TextStyle.Body1"><b>@Mentor.School</b></RadzenText>
        }

        @* COMPANY *@
        @if (Mentor.Company != null)
        {
            <RadzenText TextStyle="TextStyle.Overline" class="rz-text-wrap rz-mt-1 rz-mb-0">Company</RadzenText>
            <RadzenText TextStyle="TextStyle.Body1"><b>@Mentor.Company</b></RadzenText>
        }

        @* INDUSTRY *@
        @if (Mentor.Industry != null){
            <RadzenText TextStyle="TextStyle.Overline" class="rz-text-wrap rz-mt-1 rz-mb-0">Industry</RadzenText>
            <RadzenText TextStyle="TextStyle.Body1"><b>@Mentor.Industry</b></RadzenText>
        }

        @* LINKEDIN *@
        @if (Mentor.LinkedInLink != null)
        {
            <RadzenText TextStyle="TextStyle.Overline" class="rz-text-wrap rz-mt-1 rz-my-0">LinkedIn</RadzenText>
            <RadzenText TextStyle="TextStyle.Body1"><a href=https://@Mentor.LinkedInLink>@Mentor.LinkedInLink</a></RadzenText>
        }

        @* BUSINESS LOCATION *@
        @if (Mentor.BusinessCity != null && Mentor.BusinessCountry != null && Mentor.BusinessState != null)
        {
            <RadzenText TextStyle="TextStyle.Overline" class="rz-text-wrap rz-mt-1 rz-my-0">Business Location</RadzenText>
            <RadzenText class="mb-2" TextStyle="TextStyle.Body1"><b>@((Mentor.BusinessCity ?? "") + (Mentor.BusinessState != null ? ", " + Mentor.BusinessState : "") + (Mentor.BusinessCountry != null ? ", " + Mentor.BusinessCountry : ""))</b></RadzenText>
        }
           
            
    </RadzenStack>
</RadzenStack>

@* BIO (it spans he width of both rows at the bottom) *@
<RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Start" Gap="4" class="rz-p-2">
    <RadzenStack Orientation="Orientation.Vertical">
    @if (Mentor.Bio != null)
    {
        <RadzenText TextStyle="TextStyle.Overline" class="rz-text-wrap rz-mt-2 rz-my-0">Bio</RadzenText>
        <RadzenText TextStyle="TextStyle.Body1"><b>@Mentor.Bio</b></RadzenText> 
    }
    </RadzenStack>
</RadzenStack>

</div>

@* BOTTOM BUTTONS *@
<RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Start" Gap="6" class="rz-p-2">
    <CascadingValue Value="@Mentor">
        <RequestMentorshipButton />
    </CascadingValue>
    <RadzenButton Variant="Variant.Outlined" Style="font-size:12px" Text="Send Chat" Click="GoToThatMentorsChat" />
</RadzenStack>

@code {
    //must have this property for the cascading dropdown
    [Parameter]
    public User Mentor { get; set; }

    int? newOrExistingMatchId;
    User loggedInUser;

    // make a new empty list
    List<int?> listOfUserIds = new List<int?>();

    public async Task GoToThatMentorsChat(MouseEventArgs args)
    {
        listOfUserIds.Add(Mentor.UserId);
        newOrExistingMatchId = await chatService.GetOrCreateMatch(loggedInUser.UserId, listOfUserIds);
        NavigationManager.NavigateTo($"/chat/{newOrExistingMatchId}");
    }

    protected override async Task OnInitializedAsync()
    {
        loggedInUser = sessionService.SessionUser;
    }
}
