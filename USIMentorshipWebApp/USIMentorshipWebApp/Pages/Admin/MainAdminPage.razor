@page "/admin-portal"
@layout MainLayout
@using USIMentorshipWebApp.Data


<h1>Admin Portal</h1>

<RadzenTabs TabPosition="@TabPosition.Top" @bind-SelectedIndex=@selectedIndex>
    <Tabs>
        @* USERS TAB *@
        <RadzenTabsItem Text="Users">
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="10px" class="mt-2 mb-4">
                @* ADD NEW USER BUTTON *@
                <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="add_circle_outline" Text="Add New User" Click="@InsertRow" Disabled="@(editMode == DataGridEditMode.Single && usersToInsert.Count() > 0)" />
                
                @* EDIT MODE BUTTON*@
                <div style="white-space:nowrap; margin-left: 20px ">Edit Mode:</div>
                <RadzenSelectBar @bind-Value="@editMode" TextProperty="Text" ValueProperty="Value" style="margin-right: 16px"
                             Data="@(Enum.GetValues(typeof(DataGridEditMode)).Cast<DataGridEditMode>().Select(t => new { Text = $"{t}", Value = t }))" Size="ButtonSize.Small"
                             Disabled="@(editMode == DataGridEditMode.Multiple && usersToInsert.Count() > 1)" />
            </RadzenStack>

            @* USER GRID DEFINED *@
            <RadzenDataGrid @ref="usersGrid" AllowAlternatingRows="false" AllowFiltering="true" AllowPaging="true" PageSize="5" AllowSorting="true" EditMode="@editMode"
                            Data="@users" TItem="User" RowUpdate="@OnUpdateRow" RowCreate="@OnCreateRow" Sort="@Reset" Page="@Reset" Filter="@Reset" ColumnWidth="200px">
                <Columns>
                    @* USER ID COLUMN *@
                    <RadzenDataGridColumn TItem="User" Property="UserId" Title="User ID" Width="120px" Frozen="true" />
                    
                    @* USER FIRST NAME COLUMN *@
                    <RadzenDataGridColumn TItem="User" Property="User.FirstName" Title="First Name" Width="280px"/>

                     @* USER LAST NAME COLUMN *@
                    <RadzenDataGridColumn TItem="User" Property="User.LastName" Title="Last Name" Width="220px"/>

                    @* USER CLASS YEAR COLUMN *@
                    <RadzenDataGridColumn TItem="User" Property="ClassYear" Title="Class Year" Width="200px"/>

                    @* USER GENDER COLUMN *@
                    <RadzenDataGridColumn TItem="User" Property="Gender" Title="Gender"/>

                    @* USER MAJOR COLUMN *@
                    <RadzenDataGridColumn TItem="User" Property="Major" Title="Major" />

                    @* USER MINOR COLUMN *@
                    <RadzenDataGridColumn TItem="User" Property="Minor" Title="Minor"/>

                    @* USER CURRENT POSITION COLUMN *@
                    <RadzenDataGridColumn TItem="User" Property="CurrentPosition" Title="Current Position"/>
                </Columns>
            </RadzenDataGrid>
        
        </RadzenTabsItem>
        
        @* CHATS TAB *@
        <RadzenTabsItem Text="Chats">
            Chats
        </RadzenTabsItem>

        @* MATCHES TAB *@
        <RadzenTabsItem Text="Matches">
            Matches
        </RadzenTabsItem>
    </Tabs>
</RadzenTabs>

@code {
    TabPosition tabPosition = TabPosition.Top;
    RadzenDataGrid<User> usersGrid;

    @* EXAMPLE USER DATA FOR THE TABLE *@
    IEnumerable<User> users = new List<User>
    {
        new User
        {
            UserId = "1",
            FirstName = "John",
            LastName = "Doe",
            Industry = "Software",
            CurrentPosition = "Software Engineer",
            Company = "Tech Corp",
            Major = "Computer Science",
            Minor = "Mathematics",
            BusinessCountry = "USA",
            BusinessState = "California",
            BusinessCity = "San Francisco",
            ClassYear = "2022",
            Gender = "Male",
            ProfilePicturePath = null
        },
        new User
        {
            UserId = "2",
            FirstName = "Jane",
            LastName = "Smith",
            Industry = "Finance",
            CurrentPosition = "Financial Analyst",
            Company = "Finance Corp",
            Major = "Finance",
            Minor = "Economics",
            BusinessCountry = "USA",
            BusinessState = "New York",
            BusinessCity = "New York City",
            ClassYear = "2021",
            Gender = "Female",
            ProfilePicturePath = null
        },
        new User
        {
            UserId = "3",
            FirstName = "Bob",
            LastName = "Johnson",
            Industry = "Marketing",
            CurrentPosition = "Marketing Manager",
            Company = "Marketing Corp",
            Major = "Marketing",
            Minor = "Business Administration",
            BusinessCountry = "USA",
            BusinessState = "Illinois",
            BusinessCity = "Chicago",
            ClassYear = "2020",
            Gender = "Male",
            ProfilePicturePath = null
        }
    };

    IEnumerable<User> users1;
    IEnumerable<User> users2;

    DataGridEditMode editMode = DataGridEditMode.Single;

    List<User> usersToInsert = new List<User>();
    List<User> usersToUpdate = new List<User>();

    int selectedIndex = 0;


    void Reset()
    {
        usersToInsert.Clear();
        usersToUpdate.Clear();
    }

    void Reset(User user)
    {
        usersToInsert.Remove(user);
        usersToUpdate.Remove(user);
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        // customers = dbContext.Customers;
        // employees = dbContext.Employees;

        // orders = dbContext.Orders.Include("Customer").Include("Employee");
    }

    async Task EditRow(User user)
    {
        if (editMode == DataGridEditMode.Single && usersToInsert.Count() > 0)
        {
            Reset();
        }

        usersToUpdate.Add(user);
        await usersGrid.EditRow(user);
    }

    void OnUpdateRow(User user)
    {
        // Reset(order);

        // dbContext.Update(order);

        // dbContext.SaveChanges();
    }

    async Task SaveRow(User user)
    {
        await usersGrid.UpdateRow(user);
    }

    void CancelEdit(User user)
    {
        Reset(user);

        usersGrid.CancelEditRow(user);

        // var orderEntry = dbContext.Entry(user);
        // if (orderEntry.State == EntityState.Modified)
        // {
        //     orderEntry.CurrentValues.SetValues(orderEntry.OriginalValues);
        //     orderEntry.State = EntityState.Unchanged;
        // }
    }

    async Task DeleteRow(User user)
    {
        Reset(user);

        // if (user.Contains(user))
        // {
        //     dbContext.Remove<Order>(order);

        //     dbContext.SaveChanges();

        //     await ordersGrid.Reload();
        // }
        // else
        // {
        //     ordersGrid.CancelEditRow(order);
        //     await ordersGrid.Reload();
        // }
    }

    async Task InsertRow()
    {
        if (editMode == DataGridEditMode.Single)
        {
            Reset();
        }

        // var order = new Order();
        // ordersToInsert.Add(order);
        // await ordersGrid.InsertRow(order);
    }

    void OnCreateRow(User user)
    {
        // dbContext.Add(order);

        // dbContext.SaveChanges();

        // ordersToInsert.Remove(order);
    }
}
