@using USIMentorshipWebApp.Data
@using USIMentorshipWebApp.Models
@inject AdminPortalService adminPortalService
@inject RegistrationDataService evilRegistrationService
@inject RegistrationDataService registrationDataService;

@using Microsoft.EntityFrameworkCore
@using USIMentorshipWebApp.Shared.Dropdowns


<style>
    .rz-grid-table {
        width: unset;
    }
</style>

<RadzenDataGrid @ref="usersGrid" PageSize="5" AllowFiltering="true" AllowPaging="true" AllowSorting="true" Data="@users"
                TItem="User" EditMode="@editMode" RowUpdate="@OnUpdateRow">

    <Columns>
        <RadzenDataGridColumn TItem="User" Property="UserId" Title="User ID">

        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="User" Property="FirstName" Title="First Name">
            <EditTemplate Context="user">
                <RadzenDropDown @bind-Value=@user.FirstName Data=@users></RadzenDropDown>
            </EditTemplate>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="User" Property="LastName" Title="Last Name">
            <EditTemplate Context="user">
                <RadzenDropDown @bind-Value=@user.LastName Data=@users></RadzenDropDown>
            </EditTemplate>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="User" Property="Password" Title="Password">
            <EditTemplate Context="user">
                <RadzenDropDown @bind-Value=@user.Password Data=@users></RadzenDropDown>
            </EditTemplate>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="User" Property="PhoneNumber" Title="Phone Number">
            <EditTemplate Context="user">
                <RadzenDropDown @bind-Value=@user.PhoneNumber Data=@users></RadzenDropDown>
            </EditTemplate>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="User" Property="EmailAddress" Title="Email Address">
            <EditTemplate Context="user">
                <RadzenDropDown @bind-Value=@user.EmailAddress Data=@users></RadzenDropDown>
            </EditTemplate>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="User" Property="ProfilePicture" Title="Email Address">
            <EditTemplate Context="user">
                <RadzenDropDown @bind-Value=@user.ProfilePicture Data=@users></RadzenDropDown>
            </EditTemplate>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="User" Property="LinkedInLink" Title="LinkedIn Link">
            <EditTemplate Context="user">
                <RadzenDropDown @bind-Value=@user.LinkedInLink Data=@users></RadzenDropDown>
            </EditTemplate>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="User" Property="Bio" Title="Bio">
            <EditTemplate Context="user">
                <RadzenTextArea @bind-Value=@user.Bio></RadzenTextArea>
            </EditTemplate>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="User" Property="Status" Title="Account Status">
            <EditTemplate Context="user">

            </EditTemplate>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="User" Property="Major" Title="Major">
            <EditTemplate Context="user">
                <RadzenDropDown @bind-Value=@user.Major Data=@users></RadzenDropDown>
            </EditTemplate>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="User" Property="Minor" Title="Minor">
            <EditTemplate Context="user">
                <RadzenDropDown @bind-Value=@user.Minor Data=@users></RadzenDropDown>
            </EditTemplate>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="User" Property="Industry" Title="Industry">
            <EditTemplate Context="user">
                <RadzenDropDown @bind-Value=@user.Industry Data=@industries></RadzenDropDown>
            </EditTemplate>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="User" Property="Company" Title="Company">
            <EditTemplate Context="user">
                <RadzenDropDown @bind-Value=@user.Company Data=@users></RadzenDropDown>
            </EditTemplate>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="User" Property="CurrentPosition" Title="Current Position">
            <EditTemplate Context="user">
                <RadzenDropDown @bind-Value=@user.CurrentPosition Data=@users></RadzenDropDown>
            </EditTemplate>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="User" Property="DateOfBirth" Title="Date Of Birth">
            <EditTemplate Context="user">

            </EditTemplate>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="User" Property="GraduationYear" Title="Graduation Year">

        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="User" Property="Gender" Title="Gender">
            <EditTemplate Context="user">
                <RadzenDropDown @bind-Value=@user.Gender Data=@genders></RadzenDropDown>
            </EditTemplate>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="User" Property="School" Title="School">
            <EditTemplate Context="user">

            </EditTemplate>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="User" Property="MenteesPerSemester" Title="Mentees Per Semester">
            <EditTemplate Context="user">
                <RadzenDropDown @bind-Value=@user.MenteesPerSemester Data=@MenteesPerSemesterOptions></RadzenDropDown>
            </EditTemplate>
        </RadzenDataGridColumn>

        @* <RadzenDataGridColumn TItem="User" Property="BusinessCityId" Title="Business City Id">

        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="User" Property="BusinessStateCode" Title="Business State Code">

        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="User" Property="BusinessCountryCode" Title="Business Country Code">

        </RadzenDataGridColumn> *@

        <RadzenDataGridColumn TItem="User" Context="user" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Frozen="true" FrozenPosition="FrozenColumnPosition.Right">
            <Template>
                <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => EditRow(user))"></RadzenButton>
            </Template>
            <EditTemplate>
                <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@((args) => SaveRow(user))"></RadzenButton>

                <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@((args) => CancelEdit(user))"> </RadzenButton>
            </EditTemplate>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

@code {
    // defines an instance of the RadzenDataGrid and fills it with User objects
    RadzenDataGrid<User> usersGrid;

    // all of the users retrieved to display in the table
    List<User>? users;

    // for updating
    List<User> usersToUpdate = new List<User>();
    // for adding a user
    List<User> usersToInsert = new List<User>();

    // editMode for the grid
    DataGridEditMode editMode = DataGridEditMode.Single;

    public List<string> genders = new List<string> { "Male", "Female", "Other" };
    public List<string> jobTitles = new List<string>();
    public List<string> industries = new List<string>();
    public List<int> MenteesPerSemesterOptions = new List<int> { 1, 2, 3, 4, 5 };


    private UsiMentorshipApplicationContext dbContext = new UsiMentorshipApplicationContext();

    void Reset()
    {
        // for adding a user
        usersToInsert.Clear();

        // for updating
        usersToUpdate.Clear();
    }

    void Reset(User user)
    {
        usersToInsert.Remove(user);
        usersToUpdate.Remove(user);
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        users = await adminPortalService.GetAllUsers();
        jobTitles = await evilRegistrationService.GetJobTitlesAsync();
    }

    // clear out the users to edit list and add this new user from the row selected to the usersToUpdate list
    async Task EditRow(User user)
    {
        if (editMode == DataGridEditMode.Single)
        {
            Reset();
        }

        // starts tracking (add a better comment to explain this line)
        dbContext.Users.Attach(user);

        usersToUpdate.Add(user);

        // Radzen dataGrid method to define the row as being in edit mode (it knows the row by the user object passed in)
        await usersGrid.EditRow(user);
    }

    // called when you click the check,
    void OnUpdateRow(User user)
    {
        // clears out the users to insert and add list
        Reset(user);

        // starts tracking (add a better comment to explain this line)
        dbContext.Users.Attach(user);

        // Update is used in Entity Framework and updates the object passed in to the database
        dbContext.Update(user);

        // saves the database changes
        dbContext.SaveChanges();
    }

    // make the row view mode and reflect changes
    async Task SaveRow(User user)
    {
        // starts tracking (add a better comment to explain this line)
        dbContext.Users.Attach(user);

        // update row is a Radzen method that is used to turn the row into not edit mode and reflect the changes
        await usersGrid.UpdateRow(user);
    }

    // reverts all changes made to an entity passed in and entity state stores what the user used to be
    void CancelEdit(User user)
    {
        // removes the user from the usersToEdit list
        Reset(user);

        // sets the row to view mode by the user object passed in (that's how it knows what row)
        usersGrid.CancelEditRow(user);

        // starts tracking (add a better comment to explain this line)
        dbContext.Users.Attach(user);

        // tracks the user object specified
        var userEntry = dbContext.Entry(user);

        // see if that entry has been modified
        if (userEntry.State == EntityState.Modified)
        {
            // set the current value of the entity back to the old values
            userEntry.CurrentValues.SetValues(userEntry.OriginalValues);

            // set the state to unchanged (tell EF there is nothing to change)
            userEntry.State = EntityState.Unchanged;
        }
    }
}