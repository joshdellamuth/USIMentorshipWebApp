@* 
    1. On left, show image 
    2. Show profile picture, Name, Bio and buttons
    3. Make responsive 
    4. Hard code for now 
*@
@inject NavigationManager NavigationManager
@inject DialogService DialogService
@inject UserService userService
@using USIMentorshipWebApp.Data;
@using USIMentorshipWebApp.Models;
@using USIMentorshipWebApp.Shared.FullProfileInfo;
@using USIMentorshipWebApp.Shared.RequestMentorship;

@* In this component, eventually, we will need to pull in the data to render 
    this component a certain amount of times. To do this, we would have
    to run the query to get the Mentors first, then from those results, 
    loop through that list and for each mentor object, render the element
    pulling from each of its properties. 
*@


@* rz-my-12 applies margin to the top and bottom of an element (my is for margin y) (12 correlates to 48 px) *@
@* rz-mx-auto applies a margin to both the left and right of an element (mx stands for margin x) auto means the browser will select a suitable margin *@
<RadzenCard Class="rz-p-3 default-margin" Style="max-width: 350px;">
    @* rz-p-2 applies padding to all sides of an element to radzen stack *@
    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Start" Gap=".5rem" Class="rz-p-2">
        @* PROFILE PICTURE AND BUSINESS LOCATION *@
        <RadzenStack Orientation="Orientation.Vertical" Style="max-width:160px;">
            <RadzenImage Path=@Mentor.ProfilePicutre Style="width: 160px; height: 160px; border-radius: 50%;" />
            <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-2 rz-my-0">Major</RadzenText>
            <RadzenText TextStyle="TextStyle.Body1"><b>@Mentor.Major</b></RadzenText>
        </RadzenStack>
        @* Gap is the size of the gap between the child items of RadzenStack *@
        <RadzenStack Gap="4">
            @* rz-display-flex puts the text in a flexible layout*@
            @* rz-mt-2 applies a margin of value 2 to the top of the text *@
            @* rz-my-0 applies the vertical ma rgin of 0 to the top and bottom margin (removes the margins on top and bottom) *@
            @* NAME *@
            <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-2 rz-my-0">Mentor Name</RadzenText>
            <RadzenText TextStyle="TextStyle.Body1"><b>@(Mentor.FirstName + " " + Mentor.LastName)</b></RadzenText>
                
            @* CURRENT POSITION *@
            <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-4 rz-mb-0">Position</RadzenText>
            <RadzenText TextStyle="TextStyle.Body1"><b>@Mentor.CurrentPosition</b></RadzenText>

            @* COMPANY *@
            <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-4 rz-mb-0">Company</RadzenText>
            <RadzenText TextStyle="TextStyle.Body1"><b>@Mentor.Company</b></RadzenText>

            @* BUSINESS LOCATION *@
            <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-2 rz-my-0">Business Location</RadzenText>
            <RadzenText class="mb-2" TextStyle="TextStyle.Body1"><b>@(displayedCity.CityName + ", " + displayedState.StateName + ", " + displayedCountry.CountryName)</b></RadzenText>
        </RadzenStack>
    </RadzenStack>
    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End" Gap="10">
        <FullProfileButton/>
        <RequestMentorshipButton/>
        <RadzenButton Variant="Variant.Outlined" Style="font-size:12px" Text="Send Chat" Click="GoToThatMentorsChat"/>
    </RadzenStack>
</RadzenCard>


@code {
    // CascadingParameter attribute maps it to the parameter from the CascadingParameter in MentorMatch (does this by type)
    [CascadingParameter]
    //must have this property for the cascading dropdown 
    public User Mentor { get; set; }

    void GoToThatMentorsChat(MouseEventArgs args)
    {
        NavigationManager.NavigateTo("/chat");
    }

    void RequestMembershipDetails(MouseEventArgs args)
    {
                
    }

    void OpenFullProfile(MouseEventArgs args)
    {

    }

    State displayedState;
    City displayedCity;
    Country displayedCountry;

    protected override async Task OnInitializedAsync()
    {
        displayedState = await userService.GetStateByIdAsync(Mentor.BusinessStateCode);
        displayedCity = await userService.GetCityByIdAsync(Mentor.BusinessCityId);
        displayedCountry = await userService.GetCountryByIdAsync(Mentor.BusinessCountryCode);
    }
}
