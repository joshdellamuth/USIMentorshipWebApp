@using USIMentorshipWebApp.Shared.Dropdowns;
@using USIMentorshipWebApp.Data;
@using USIMentorshipWebApp.Models;
@using System.Linq;


@* COULD EVENTUALLY CHANGE THESE TO CASCADING DROPDOWN COMPONENT IN RADZEN *@

<br />
<div class="row">
    <MultiSelectDropdownWithLabelAbove DropdownData="@industriesList" SelectedValues="@industriesSelected" Label="Industry:" />
    <MultiSelectDropdownWithLabelAbove DropdownData="@currentPositionsList" SelectedValues="@currentPositionSelected" Label="Current Position(s):" />
    @* Companies is an example of selecting from a list of objects *@
    <MultiSelectDropdownWithLabelAbove DropdownData="@companies" SelectedValues="@companiesSelected" Label="Company" />
    <MultiSelectDropdownWithLabelAbove DropdownData="@majorsList" SelectedValues="@majorSelected" Label="Major(s):" />
    
    @* Removed Minor selection per Maggie request *@
    @* <MultiSelectDropdownWithLabelAbove DropdownData="@minorsList" SelectedValues="@minorSelected" Label="Minor(s):" /> *@
    <MultiSelectDropdownWithLabelAbove DropdownData="@businessCountriesList" SelectedValues="@businessCountriesSelected" Label="Business Countries:" />
    <MultiSelectDropdownWithLabelAbove DropdownData="@ageRangeList" SelectedValues=@ageRangesSelected Label="Age Preference(s):" />
    <MultiSelectDropdownWithLabelAbove DropdownData="@genderPreferencesList" SelectedValues="@genderPreferencesSelected" Label="Gender Preference:" />
    <MultiSelectDropdownWithLabelAbove DropdownData="@businessCitiesList" SelectedValues="@businessCitiesSelected" Label="Business City:" />
    <MultiSelectDropdownWithLabelAbove DropdownData="@businessStatesList" SelectedValues="@businessStatesSelected" Label="Business State:" />

    @* AutoComplete for Searching for a Mentor by Name *@
    <AutoCompleteWithLabelAbove Label="Search by Mentor Name:" SelectedValue=@SelectedMentorName AutoCompleteData=@mentors DisplayPropertyName="FirstName"/>
</div>

<RadzenRow>
    <RadzenButton Style="width:140px; font-size:14px;" Variant="Variant.Outlined" ButtonStyle="ButtonStyle.Secondary" Click=@SearchMentors Text="Find Mentors" />
</RadzenRow>

<div class="row" style="justify-content:center;">
    @* CascadingValue allows us to pass down the userExample variable to next component to use it there *@
    @* *@
    @if (mentorResults != null)
    {
        foreach (User user in mentorResults)
        {
            <CascadingValue Value="@user">
                <MentorResultCard />
            </CascadingValue>
        }
    }

</div>

@code {

    private UsiMentorshipApplicationContext _context = new UsiMentorshipApplicationContext();


    public List<string> industriesList;
    public List<string> currentPositionsList;
    public List<string> majorsList;
    public List<string> companies;

    public List<User>? mentorResults;


    protected override void OnInitialized()
    {
        industriesList = _context.Users.Where(u => !string.IsNullOrEmpty(u.Industry)).Select(u => u.Industry).Distinct().ToList();
        currentPositionsList = _context.Users.Where(u => !string.IsNullOrEmpty(u.CurrentPosition)).Select(u => u.CurrentPosition).Distinct().ToList();
        majorsList = _context.Users.Where(u => !string.IsNullOrEmpty(u.Major)).Select(u => u.Major).Distinct().ToList();
        companies = _context.Users.Where(u => !string.IsNullOrEmpty(u.Company)).Select(u => u.Company).Distinct().ToList();
    }



    //NOTE: MAY HAVE TO ADD VALUE PROPERTY AND TEXT PORPERTY TO NONMULTISELECT DROPDOWNS SO WE CAN GET THE IDs OF THE OBJECTS
    # region Industry
    public List<string>? industriesSelected;
    #endregion

    #region Current Position
    public List<string>? currentPositionSelected;
    #endregion

    //HAS A DESCRIPTION OF WHAT WE'LL NEED TO HAVE IN FUTUTRE
    # region Major
    // whatever is the current selection will be stored here
    public List<string>? majorSelected;
    #endregion

    // Removed Minor selection per Maggie request
    // #region Minor
    // public string? minorSelected;
    // public List<string> minorsList = new List<string> { "Computer Science", "Business", "Electrical Engineering", "Marketing" };
    // #endregion

    //THIS ONE USES A MULTISELECT COMPONENT
    # region Companies
    public List<string>? companiesSelected;
    # endregion

    #region Age Range
    public List<string> ageRangesSelected;
    public List<string> ageRangeList = new List<string> { "20-30", "30-40", "50-60", "60-70", "70-80", "80+" };
    #endregion

    #region Business City
    public List<string>? businessCitiesSelected;
    public List<string> businessCitiesList = new List<string> { "Evansville", "Henderson", "Louisville", "Owensboro" };
    #endregion

    #region Business State
    public List<string>? businessStatesSelected;
    public List<string> businessStatesList = new List<string> { "Indiana", "Illinois", "Kentucky", "Ohio" };
    #endregion

    #region Business Country
    public List<string>? businessCountriesSelected;
    public List<string> businessCountriesList = new List<string> { "USA", "Mexico", "Canada", "India" };
    #endregion

    #region Gender Preference
    public List<string>? genderPreferencesSelected;
    public List<string> genderPreferencesList = new List<string> { "Male", "Female" };
    #endregion

    #region Search by Name Variables
    //define the value of the data that is selected
    public string SelectedMentorName;
    public List<UserOld> mentors = UserData.users;

    #endregion

    public void SearchMentors(MouseEventArgs args)
    {
        mentorResults = _context.Users.ToList();
    }
}
