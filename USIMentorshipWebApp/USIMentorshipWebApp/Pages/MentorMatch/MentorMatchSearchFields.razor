@using USIMentorshipWebApp.Data;
@using USIMentorshipWebApp.Models;
@using System.Linq;

<br />
<div class="row">
    @* INDUSTRIES *@
    <div class="our-column mb-2">
        <label>Industries:</label>
        <RadzenDropDown @bind-SearchText=@industriesSearchText @bind-Value=@industriesSelected Multiple="true" Chips=true AllowFiltering ="true" Data=@industries AllowClear="true" Style="max-width:160px;" />
    </div>
    
    @* CURRENT POSITIONS *@
    <div class="our-column mb-2">
        <label>Current Position(s):</label>
        <RadzenDropDown @bind-Value=@currentPositionsSelected Data=@currentPositions Multiple="true" Chips=true Style="max-width:160px;" />
    </div>

    @* COMPANIES *@
    <div class="our-column mb-2">
        <label>Companies:</label>
        <RadzenDropDown @bind-Value=@companiesSelected Data=@companies Multiple="true" Chips=true Style="max-width:160px;" />
    </div>

    @* MAJOR *@
    <div class="our-column mb-2">
        <label>Major(s):</label>
        <RadzenDropDown @bind-Value=@majorsSelected Data=@majorsList Multiple="true" Chips=true Style="max-width:160px;" />
    </div>

    @* AGE RANGE *@
    <div class="our-column mb-2">
        <label>Preferred Age Range(s):</label>
        <RadzenDropDown @bind-Value=@ageRangesSelected Data=@ageRanges Multiple="true" Chips=true Style="max-width:160px;" />
    </div>

    @* GENDER PREFERENCES *@
    <div class="our-column mb-2">
        <label>Gender Preference:</label>
        <RadzenDropDown @bind-Value=@gendersSelected Data=@genders Multiple="true" Chips=true Style="max-width:160px;" />
    </div>

    @* BUSINESS COUNTRIES *@
    <div class="our-column mb-2">
        <label>Business Countries:</label>
        <RadzenDropDown @bind-Value=@businessCountriesSelected Data=@businessCountries Multiple="true" Chips=true Style="max-width:160px;" />
    </div>

    @* BUSINESS STATES *@
    <div class="our-column mb-2">
        <label>Business States:</label>
        <RadzenDropDown @bind-Value=@businessStatesSelected Data=@businessStates Multiple="true" Chips=true Style="max-width:160px;" />
    </div>

    @* BUSINESS CITIES *@
    <div class="our-column mb-2">
        <label>Business Cities:</label>
        <RadzenDropDown @bind-Value=@businessCitiesSelected Data=@businessCities Multiple="true" Chips=true Style="max-width:160px;" />
    </div>

    @* MENTOR NAME SEARCH *@
    <div class="our-column mb-2">
        <label>Search by Mentor Name:</label>
        <RadzenAutoComplete @bind-Value=@MentorNameSelected Data=@mentors TextProperty=FullName FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" Style="max-width:200px;" />
    </div>
</div>

@* FIND MENTORS BUTTON *@
<RadzenRow>
    <RadzenButton Style="width:140px; font-size:14px;" Variant="Variant.Outlined" ButtonStyle="ButtonStyle.Secondary" Click=@SearchMentors Text="Find Mentors" />
</RadzenRow>

<div class="row" style="justify-content:center;">
    @* CascadingValue allows us to pass down the user variable to next component to use it there *@
    @if (mentorResults != null)
    {
        foreach (User user in mentorResults)
        {
            <CascadingValue Value="@user">
                <MentorResultCard />
            </CascadingValue>
        }
    }
</div>

@code {
    private UsiMentorshipApplicationContext _context = new UsiMentorshipApplicationContext();

    # region Industry
    public List<string> industries;
    public List<string>? industriesSelected = new List<string>() { };
    public string industriesSearchText;
    #endregion

    #region Current Position
    public List<string> currentPositions;
    public List<string>? currentPositionsSelected = new List<string>() { };
    public string currentPositionsSearchText;
    #endregion

    #region Major
    public List<string> majorsList;
    public List<string> majorsSelected = new List<string>() {  };
    public string majorsSearchText;
    #endregion

    # region Companies
    public List<string> companies;
    public List<string>? companiesSelected = new List<string>() { };
    public string companiesSearchText;
    # endregion

    #region Age Range
    public List<string> ageRangesSelected;
    public List<string> ageRanges = new List<string> { "20-30", "30-40", "50-60", "60-70", "70-80", "80+" };
    #endregion

    #region Business Country
    public List<string>? businessCountriesSelected = new List<string>() { };
    public List<string> businessCountries;
    public string businessCountriesSearchText;
    #endregion

    #region Business State
    public List<string>? businessStatesSelected = new List<string>() { };
    public List<string> businessStates;
    public string businessStatesSearchText;
    #endregion

    #region Business City
    public List<string>? businessCitiesSelected = new List<string>() { };
    public List<string> businessCities;
    public string businessCitiesSearchText;
    #endregion

    #region Gender Preference
    public List<string>? gendersSelected = new List<string>() { };
    public List<string> genders = new List<string> { "Male", "Female", "Other" };
    #endregion

    #region Search by Name Variables
    //define the value of the data that is selected
    public string MentorNameSelected;
    public List<User> mentors = new List<User>() { };
    #endregion

    #region Mentor Results Variables 
    public List<User> mentorResults;
    public List<User> allMentors;
    #endregion

    protected override void OnInitialized()
    {
        // allMentors will be used in the base query and for dropdown data
        allMentors = _context.Users
            .Join(
                _context.UserRoles,
                user => user.UserId,
                userRole => userRole.UserId,
                (user, userRole) => new { User = user, UserRole = userRole }
            )
            .Join(
                _context.Roles,
                combined => combined.UserRole.RoleId,
                role => role.RoleId,
                (combined, role) => new { User = combined.User, Role = role }
            )
            .Where(combined => combined.Role.RoleName == "Mentor")
            .Select(combined => combined.User)
            .ToList();

        // setting the dropdown data based on the database when the page loads
        industries = allMentors.Where(u => !string.IsNullOrEmpty(u.Industry)).Select(u => u.Industry).Distinct().ToList();
        currentPositions = allMentors.Where(u => !string.IsNullOrEmpty(u.CurrentPosition)).Select(u => u.CurrentPosition).Distinct().ToList();
        majorsList = allMentors.Where(u => !string.IsNullOrEmpty(u.Major)).Select(u => u.Major).Distinct().ToList();
        companies = allMentors.Where(u => !string.IsNullOrEmpty(u.Company)).Select(u => u.Company).Distinct().ToList();
        businessCountries = allMentors.Where(u => !string.IsNullOrEmpty(u.BusinessCountry)).Select(u => u.BusinessCountry).Distinct().ToList();
        businessStates = allMentors.Where(u => !string.IsNullOrEmpty(u.BusinessState)).Select(u => u.BusinessState).Distinct().ToList();
        businessCities = allMentors.Where(u => !string.IsNullOrEmpty(u.BusinessCity)).Select(u => u.BusinessCity).Distinct().ToList();

        //mentors is used for the autocomplete field
        mentors = allMentors;
    }

    public void SearchMentors(MouseEventArgs args)
    {
        // sets results to all mentors when nothing is filled out
        mentorResults = allMentors;

        if (industriesSelected != null)
        {
            mentorResults = mentorResults
                .Where(user => industriesSelected.Contains(user.Industry))
                .ToList();
        }
        if (currentPositionsSelected.Count != 0)
        {
            mentorResults = mentorResults
                .Where(user => currentPositionsSelected.Contains(user.CurrentPosition))
                .ToList();
        }
        if (companiesSelected.Count != 0)
        {
            mentorResults = mentorResults
                .Where(user => companiesSelected.Contains(user.Company))
                .ToList();
        }
        if (majorsSelected.Count != 0)
        {
            mentorResults = mentorResults
                .Where(user => majorsSelected.Contains(user.Major))
                .ToList();
        }
        if (gendersSelected.Count != 0)
        {
            mentorResults = mentorResults
                .Where(user => gendersSelected.Contains(user.Gender))
                .ToList();
        }
        if (businessCountriesSelected.Count != 0)
        {
            mentorResults = mentorResults
                .Where(user => businessCountriesSelected.Contains(user.BusinessCountry))
                .ToList();
        }
        if (businessStatesSelected.Count != 0)
        {
            mentorResults = mentorResults
                .Where(user => businessStatesSelected.Contains(user.BusinessState))
                .ToList();
        }
        if (businessCitiesSelected.Count != 0)
        {
            mentorResults = mentorResults
                .Where(user => businessCitiesSelected.Contains(user.BusinessCity))
                .ToList();
        }
        if ((MentorNameSelected != null) & (MentorNameSelected != ""))
        {
            mentorResults = mentorResults
                .Where(user => MentorNameSelected.Equals(user.FirstName + " " + user.LastName))
                .ToList();
        }
        

        if (mentorResults.Count == 0)
        {
            mentorResults = new List<User>();
        }
    }
}
