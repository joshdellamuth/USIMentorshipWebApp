@inject NavigationManager NavigationManager
@inject DialogService DialogService
@using USIMentorshipWebApp.Data;
@using USIMentorshipWebApp.Shared.FullProfileInfo;
@using USIMentorshipWebApp.Shared.RequestMentorship;

<div class="container-fluid">
    <div class="row px-3">
        <div class="col-md-6 col-lg-4 p-3">
            <RadzenCard Style="width:100">
                <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Major</RadzenText>
                <RadzenTextBox @ref="rztxtbxMajor" class="w-100" Value="@userProfile.Major" onkeyup="@SaveChange"/>
            </RadzenCard>
        </div>
        <div class="col-md-6 col-lg-4 p-3">
            <RadzenCard Style="width:100">
                <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Minor</RadzenText>
                <RadzenTextBox @ref="rztxtbxMinor" class="w-100" Value="@userProfile.Minor" />
            </RadzenCard>
        </div>
        <div class="col-md-6 col-lg-4 p-3">
            <RadzenCard>
                <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Current Position</RadzenText>
                <RadzenTextBox @ref="rztxtbxCurPos" class="w-100" Value="@userProfile.CurrentPosition" />
            </RadzenCard>
        </div>
        <div class="col-md-6 col-lg-4 p-3">
            <RadzenCard>
                <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Class Year</RadzenText>
                <RadzenTextBox @ref="rztxtbxClassYear" class="w-100" MaxLength="4" Value="@userProfile.ClassYear" />
            </RadzenCard>
        </div>
        <div class="col-md-6 col-lg-4 p-3">
            <RadzenCard>
                <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Student ID</RadzenText>
                <RadzenTextBox @ref="rztxtbxStudentID" Disabled="true" class="w-100" Value="1234567890" /> @*Will need to add field for student id, even if it is null*@
            </RadzenCard>
        </div>
        <div class="col-md-6 col-lg-4 p-3">
            <RadzenCard>
                <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Email</RadzenText>
                <RadzenTextBox @ref="rztxtbxEmail" class="w-100" Value="@userProfile.Email" />
            </RadzenCard>
        </div>
        <div class="col-md-6 col-lg-4 p-3">
            <RadzenCard>
                <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Role</RadzenText>
                <RadzenRadioButtonList @ref="rzrdbtnlstRole" Value="2" TValue="int">
                    <Items>
                        <RadzenRadioButtonListItem Text="Mentee" Value="1"/>
                        <RadzenRadioButtonListItem Text="Mentor" Value="2" />
                    </Items>
                </RadzenRadioButtonList>
                @*<DropdownWithLabelAbove DropdownData="@rolesList" SelectedValue="@roleSelected"/>*@
            </RadzenCard>
        </div>
    </div>
</div>
<center>
    <RadzenButton Class="rz-mx-auto; rz-my-auto" Click=@Save Text="Save Changes" ButtonStyle="ButtonStyle.Success" />
    <RadzenButton Class="rz-mx-auto; rz-my-auto" Click=@SignOut Text="Sign Out" ButtonStyle="ButtonStyle.Danger" />
</center>


@code {
    // CascadingParameter attribute maps it to the parameter from the CascadingParameter in MentorMatch (does this by type)
    [CascadingParameter]
    //must have this property for the cascading dropdown
    public User userProfile { get; set; }
    RadzenTextBox rztxtbxMajor,rztxtbxMinor,rztxtbxCurPos,rztxtbxClassYear,rztxtbxStudentID,rztxtbxEmail;
    RadzenRadioButtonList<int> rzrdbtnlstRole;

    void SignOut(MouseEventArgs args)
    {
        NavigationManager.NavigateTo("/");
    }

    void Save(MouseEventArgs args)
    {
        NavigationManager.NavigateTo("/profile");
        foreach (User user in UserData.users)
        {
            if (user.UserId == "U1")
            {
                //here will be the updates for each textbox text
                //it will update each entry of the user's profile
            }
        }
    }

    void SaveChange(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            
        }

    }
}
