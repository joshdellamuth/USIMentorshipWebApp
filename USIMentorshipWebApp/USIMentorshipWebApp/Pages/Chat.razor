@page "/Chat"
@layout MainLayout

@*For testing purposes*@
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@implements IAsyncDisposable
@*end of testing purposes*@

<PageTitle>Chat</PageTitle>

<!--Wrapper that wraps everything-->
<div class="wrapper">
    <!--The sidebar menu container-->
    <div class="sidebar">
        <div class="small-sidebar-heading-container">
            <h1 class="sidebar-title">Chat</h1>
            <p class="sidebar-subtitle">Get chatting with your mentors/Mentees below!</p>
        </div>

        <!--Accounts that are connected with each other-->
        <div class="account-wrapper">
            <div class="small-account">
                <img src="images/jane-doe-profile-picture.png" alt="" class="image-circle" />
                <p>Kareem Kabur</p>
            </div>
            <div class="small-account">
                <img src="images/monica-johnson-mentee-profile-pciture.png" alt="" class="image-circle" />
                <p>Micelle myers</p>
            </div>
            <div class="small-account">
                <img src="images/shawn-smith-profile-picture.png" alt="" class="image-circle" />
                <p>Joshie Natashie</p>
            </div>
        </div>
     </div>

    <!--Message section-->
    <div class="message-wrapper">


        <!--This is a test html to make sure the signalR is working properly-->
        <div class="form-group">
            <label>
                User:
                <input @bind="userInput" />
            </label>
        </div>
        <div class="form-group">
            <label>
                Message:
                <input @bind="messageInput" size="50" />
            </label>
        </div>
        <button @onclick="Send" disabled="@(!IsConnected)">Send</button>

        <hr>

        <ul id="messagesList">
            @foreach (var message in messages)
            {
                <li>@message</li>
            }
        </ul>
        <!--The end of the test html-->

        <div @onclick="ToggleNavMenu">
            <span class="oi oi-menu hamburger-menu"></span>
        </div>


        <div class="message-area">
            <div class="message-recieved">Messages Recieved</div>
            <div class="message-sent">Messages sent</div>
        </div>

        <div class="message-input">
            <input type="text" placeholder="Type your message..." />
            <button>Send</button>
        </div>
    </div>
</div>

@*The following are styles for the hamburger menu *@
<div class="@NavMenuCssClass column default-margin ">


    <div @onclick="ToggleNavMenu">
        <span class="oi oi-x hamburger-menu small-menu"></span>
    </div>


    <div class="small-sidebar-heading-container">
        <h1 class="sidebar-title">Chat</h1>
        <p class="sidebar-subtitle">Get chatting with your mentors/Mentees below!</p>
    </div>

    <!--Accounts that are connected with each other-->
    <div class="account-wrapper">
        <div class="small-account">
            <img src="images/jane-doe-profile-picture.png" alt="" class="image-circle" />
            <p>Kareem Kabur</p>
        </div>
        <div class="small-account">
            <img src="images/monica-johnson-mentee-profile-pciture.png" alt="" class="image-circle" />
            <p>Micelle myers</p>
        </div>
        <div class="small-account">
            <img src="images/shawn-smith-profile-picture.png" alt="" class="image-circle" />
            <p>Joshie Natashie</p>
        </div>
    </div>

</div>

@code {
    private bool IsCollapsed = true;

    private string? NavMenuCssClass => IsCollapsed ? "hamburger-collapsed" : "hamburger-expanded";

    private void ToggleNavMenu()
    {
        IsCollapsed = !IsCollapsed;
    }

    //Test code for test html
    private HubConnection? hubConnection;
    private List<string> messages = new List<string>();
    private string? userInput;
    private string? messageInput;

    protected override async Task OnInitializedAsync()
    {

        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/chathub"))
            .WithAutomaticReconnect()
            .Build();



        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var encodedMsg = $"{user}: {message}";
            messages.Add(encodedMsg);
            InvokeAsync(StateHasChanged);
        });

        try
        {
            await hubConnection.StartAsync();
        }
        catch (Exception ex)
        {
            // Handle connection startup errors
            Console.WriteLine("Error starting SignalR connection: " + ex.Message);
        }
    }

    private async Task Send()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SendMessage", userInput, messageInput);
        }
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
    


}

