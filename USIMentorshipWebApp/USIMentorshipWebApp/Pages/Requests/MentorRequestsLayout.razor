@inject NavigationManager NavigationManager
@inject DialogService DialogService
@using USIMentorshipWebApp.Data;
@using USIMentorshipWebApp.Models
@using System.Linq;
@using USIMentorshipWebApp.Shared.FullProfileInfo;
@using USIMentorshipWebApp.Shared.RequestMentorship;

@*************Pending Requests For Mentors*********@
<body>
    <h3 style="color:dodgerblue"><b>Pending Requests</b></h3>
    @if (pendingList != null)
    {
        @foreach (User user in pendingList)
        {
            <CascadingValue Value
            ="@user">
                <RequestsResultCard1></RequestsResultCard1>
            </CascadingValue>
        }

    }
</body>

@**@

@*************Approved Requests For Mentors*********@
<body>
    <h3 style="color:forestgreen"><b>Approved Requests</b></h3>
    @if (requestsList != null)
    {
        @foreach (User user in requestsList)
        {
            <CascadingValue Value
            ="@user">
                <RequestsResultCard2></RequestsResultCard2>
            </CascadingValue>
        }

    }
</body>

@*************Denied Requests For Mentors*********@
<body>
    <h3 style="color:grey"><b>Declined Requests</b></h3>
    @if (declinedList != null)
    {
        @foreach (User user in declinedList)
        {
            <CascadingValue Value
            ="@user">
                <RequestsResultCard2></RequestsResultCard2>
            </CascadingValue>
        }

    }
</body>

@code {
    [CascadingParameter]
    public User userMentor { get; set; }

    private UsiMentorshipApplicationContext _context = new UsiMentorshipApplicationContext();
    public List<User>? pendingList;
    public List<User>? declinedList;
    public List<User>? requestsList;    //need to figure out why it keeps throwing a null exception!
    public List<User> userList;
    public int? matchId;

    void LoadRequests()
    {
        matchId = _context.UserMatches
                  .Where(ur => ur.UserId == userMentor.UserId)
                      .Select(ur => ur.MatchId)
                      .FirstOrDefault();
        userList = _context.Users.ToList();
        foreach (User user in userList) 
        {
            var matchedId = _context.UserMatches
                  .Where(ur => ur.UserId == user.UserId)
                      .Select(ur => ur.MatchId)
                      .FirstOrDefault();
            if (user.UserId != userMentor.UserId && matchedId == matchId)
            {
                if (matchId == 1)
                {
                    pendingList?.Add(user);
                }
                else if (matchId == 2)
                {
                    declinedList.Add(user);
                }
                else
                {
                    requestsList.Add(user);
                }
            }
        }
    }
}
