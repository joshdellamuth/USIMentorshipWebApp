@inject NavigationManager NavigationManager
@inject DialogService DialogService
@inject UserService userService
@using USIMentorshipWebApp.Data;
@using USIMentorshipWebApp.Models
@using System.Linq;
@using USIMentorshipWebApp.Shared.FullProfileInfo;
@using USIMentorshipWebApp.Shared.RequestMentorship;

<RadzenCard Class="rz-p-3 default-margin" Style="max-width: 500px;">
    @* rz-p-2 applies padding to all sides of an element to radzen stack *@
    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Start" Gap=".5rem" Class="rz-p-2">
        @* PROFILE PICTURE AND CLASS YEAR *@
        <RadzenStack Orientation="Orientation.Vertical" Style="max-width:160px;">
            <RadzenImage Path=@RequestUser.ProfilePicutre Style="width: 160px; height: 160px; border-radius: 50%;" />
            <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-2 rz-my-0">Class Of</RadzenText>
            <RadzenText TextStyle="TextStyle.Body1"><b>@RequestUser.GraduationYear.ToString()</b></RadzenText>

        </RadzenStack>
        @* Gap is the size of the gap between the child items of RadzenStack *@
        <RadzenStack Gap="4">
            @* rz-display-flex puts the text in a flexible layout*@
            @* rz-mt-2 applies a margin of value 2 to the top of the text *@
            @* rz-my-0 applies the vertical ma rgin of 0 to the top and bottom margin (removes the margins on top and bottom) *@
            @* NAME *@
            <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-2 rz-my-0">Name</RadzenText>
            <RadzenText TextStyle="TextStyle.Body1"><b>@(RequestUser.FullName)</b></RadzenText>

            @* MAJOR *@
            <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-4 rz-mb-0">Major</RadzenText>
            <RadzenText TextStyle="TextStyle.Body1"><b>@RequestUser.Major</b></RadzenText>

            @* MINOR *@
            <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-4 rz-mb-0">Minor</RadzenText>
            <RadzenText TextStyle="TextStyle.Body1"><b>@RequestUser.Minor</b></RadzenText>

            @* MENTORSHIP LENGTH *@
            <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-2 rz-my-0">Mentorship Length</RadzenText>
            <RadzenText TextStyle="TextStyle.Body1"><b>6 months</b></RadzenText>
        </RadzenStack>
    </RadzenStack>
    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" Gap="10">
        <CascadingValue Value="@RequestUser.UserId">
            <FullProfileButtonRequests />
        </CascadingValue>
        <RadzenButton Shade="Shade.Dark" ButtonStyle="ButtonStyle.Success" Variant="Variant.Filled" Style="font-size:12px" Text="Accept" Click="@Accept" />
        <RadzenButton Shade="Shade.Dark" ButtonStyle="ButtonStyle.Danger" Variant="Variant.Filled" Style="font-size:12px" Text="Decline" Click="@Decline" />
    </RadzenStack>
</RadzenCard>

@code {
    [CascadingParameter]
    int requestUserId { get; set; }

    User RequestUser = new User();
    private UsiMentorshipApplicationContext _context = new UsiMentorshipApplicationContext();
    public List<User> userList;
    public int? matchId;

    protected override /*async*/ void OnInitialized()
    {
        RequestUser = userService.GetUserByIdAsync(requestUserId);
    }

    void Accept()
    {
        int update = 1;
        UpdateMatchesTable(update);
    }
    void Decline()
    {
        int update = 0;
        UpdateMatchesTable(update);
    }

    void UpdateMatchesTable(int update)
    {
        userList = _context.Users.ToList();
        matchId = _context.UserMatches
                  .Where(ur => ur.UserId == RequestUser.UserId)
                      .Select(ur => ur.MatchId)
                      .FirstOrDefault();
        foreach (User user in userList)
        {
            int? matchedId = _context.UserMatches
                  .Where(ur => ur.UserId == user.UserId)
                      .Select(ur => ur.MatchId)
                      .FirstOrDefault();
            string? status = _context.Matches
                  .Where(ur => ur.MatchId == matchedId)
                      .Select(ur => ur.Status)
                      .FirstOrDefault();
            if (matchedId == matchId)
            {
                var matchToUpdate = _context.Matches.FirstOrDefault(m => m.MatchId == matchId);
                if (matchToUpdate != null)
                {
                    if (update == 1)
                    {
                        matchToUpdate.Status = "Approved";
                    }
                    else if (update == 0)
                    {
                        matchToUpdate.Status = "Declined";
                    }
                    _context.SaveChanges();
                }
            }
        }
        NavigationManager.NavigateTo("/requests");
    }
}
