@inject NavigationManager NavigationManager
@inject DialogService DialogService
@inject UserService userService
@inject SessionService sessionService
@inject RequestService requestService
@using USIMentorshipWebApp.Data;
@using USIMentorshipWebApp.Models
@using System.Linq;
@using USIMentorshipWebApp.Shared.FullProfileInfo;
@using USIMentorshipWebApp.Shared.RequestMentorship;

<RadzenCard Class="rz-p-3 default-margin" Style="max-width:350px;">
    @* rz-p-2 applies padding to all sides of an element to radzen stack *@
     <div style="height:250px; overflow:hidden;">
        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Start" Gap=".5rem" Class="rz-p-2">
            @* PROFILE PICTURE AND CLASS YEAR *@
            <RadzenStack Orientation="Orientation.Vertical" Style="max-width:160px;">
                <RadzenImage Path=@requestUser.ProfilePicutre Style="width: 160px; height: 160px; border-radius: 50%;" />

                @* REQUEST SENT DATE *@
                <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-2 rz-my-0">Date Sent</RadzenText>
                <RadzenText class="mb-2" TextStyle="TextStyle.Body1"><b>@(requestMatch.StartDate.HasValue ? requestMatch.StartDate.Value.ToString("MM/dd/yyyy h:mm tt") : "N/A")</b></RadzenText>

            </RadzenStack>
            @* Gap is the size of the gap between the child items of RadzenStack *@
            <RadzenStack Gap="4">
                @* rz-display-flex puts the text in a flexible layout*@
                @* rz-mt-2 applies a margin of value 2 to the top of the text *@
                @* rz-my-0 applies the vertical ma rgin of 0 to the top and bottom margin (removes the margins on top and bottom) *@
                @* NAME *@
                <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-2 rz-my-0">Name</RadzenText>
                <RadzenText TextStyle="TextStyle.Body1"><b>@(requestUser.FullName)</b></RadzenText>

                @* MAJOR *@
                <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-4 rz-mb-0">Major</RadzenText>
                <RadzenText TextStyle="TextStyle.Body1"><b>@requestUser.Major</b></RadzenText>

                @* GRADUATION DATE *@
                <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-2 rz-my-0">Class Of</RadzenText>
                <RadzenText TextStyle="TextStyle.Body1"><b>@(requestUser.GraduationYear.HasValue ? requestUser.GraduationYear.Value.ToString("MM/yyyy") : "N/A")</b></RadzenText>
            </RadzenStack>
        </RadzenStack>
    </div>

    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" Gap="10">
        <CascadingValue Value="@requestUser">
            <FullProfileButton />
        </CascadingValue>
        <RadzenButton Shade="Shade.Dark" ButtonStyle="ButtonStyle.Success" Variant="Variant.Filled" Style="font-size:12px" Text="Accept" Click="@Approved" />
        <RadzenButton Shade="Shade.Dark" ButtonStyle="ButtonStyle.Danger" Variant="Variant.Filled" Style="font-size:12px" Text="Decline" Click="@Declined" />
    </RadzenStack>
</RadzenCard>

@code {
    [CascadingParameter]
    public MatchRequestDisplayCardObject MatchAndUser { get; set; }

    [Parameter]
    // when clicked, pass the MatchId to the parent component
    public EventCallback<bool> OnUpdatedRequest { get; set; }

    User? requestUser;
    Match? requestMatch;

    protected override async Task OnInitializedAsync()
    {
        requestUser = MatchAndUser.RequestedUser;
        requestMatch = MatchAndUser.CorrespondingMatch;
    }

    public async Task Approved()
    {
        await requestService.UpdateMatchToApprovedAsync(MatchAndUser.CorrespondingMatch.MatchId);

    }

    public async Task Declined()
    {
        await requestService.UpdateMatchToDeclinedAsync(MatchAndUser.CorrespondingMatch.MatchId);
    }

    public async Task UpdateMatches()
    {
        
    }
}
