@page "/schedule-meeting"
@layout MainLayout
@inject DialogService DialogService
@inject NotificationService NotificationService
@using USIMentorshipWebApp.Data

<PageTitle>Schedule Meeting - USI Mentorship Program</PageTitle>

<div @onclick="ToggleNavMenu">
    <span class="oi oi-menu hamburger-menu"></span>
</div>

<h1 class="title">Schedule Meeting</h1>


<!--Wrapper that wraps everything-->
<div class="wrapper">
    <!--The sidebar menu container-->



    <div class="sidebar">
        <div class="sidebar-heading-container">
            <h1>Upcoming Meetings</h1>
            <p>Get chatting with your mentors/Mentees below!</p>
        </div>

        <!--Accounts that are connected with each other-->
        <div class="account">
            <img src="" alt="" />
            <p>Account 1</p>
        </div>
        <div class="account">
            <img src="" alt="" />
            <p>Account 1</p>
        </div>
        <div class="account">
            <img src="" alt="" />
            <p>Account 1</p>
        </div>
    </div>

    <div class="scheduler">




        <RadzenScheduler @ref=@scheduler SlotRender=@OnSlotRender style="height: 768px;" TItem="Appointment" Data=@appointments StartProperty="Start" EndProperty="End"
                         TextProperty="Text" SelectedIndex="2"
                         SlotSelect=@OnSlotSelect AppointmentSelect=@OnAppointmentSelect AppointmentRender=@OnAppointmentRender>
            <RadzenDayView />
            <RadzenWeekView />
            <RadzenMonthView />
            <RadzenYearView />
        </RadzenScheduler>
    </div>
   

    @*The following are styles for the hamburger menu *@
    <div class="@NavMenuCssClass column default-margin">


        <div @onclick="ToggleNavMenu">
            <i class="bi bi-x hamburger-menu small-menu"></i>
        </div>


        <div class="small-sidebar-heading-container">
            <h1>Chat</h1>
            <p>Get chatting with your mentors/Mentees below!</p>
        </div>

        <!--Accounts that are connected with each other-->
        <div class="small-account">
            <img src="" alt="" />
            <p>Account 1</p>
        </div>
        <div class="small-account">
            <img src="" alt="" />
            <p>Account 1</p>
        </div>
        <div class="small-account">
            <img src="" alt="" />
            <p>Account 1</p>
        </div>
    </div>




</div>


@* ******************************************************************************************************************* *@

    




@code {

    private bool IsCollapsed = true;

    private string? NavMenuCssClass => IsCollapsed ? "hamburger-collapsed" : "hamburger-expanded";

    private void ToggleNavMenu()
    {
        IsCollapsed = !IsCollapsed;
    }


    // ************************************************************************************************************



    RadzenScheduler<Appointment> scheduler;
    Dictionary<DateTime, string> events = new Dictionary<DateTime, string>();

    IList<Appointment> appointments = new List<Appointment>
    {
        //Meeting retrival method would be housed here
        new Appointment { Start = DateTime.Today.AddDays(-2), End = DateTime.Today.AddDays(-2), Text = "Birthday" },
        new Appointment { Start = DateTime.Today.AddDays(-11), End = DateTime.Today.AddDays(-10), Text = "Day off" },
        new Appointment { Start = DateTime.Today.AddDays(-10), End = DateTime.Today.AddDays(-8), Text = "Work from home" },
        new Appointment { Start = DateTime.Today.AddHours(10), End = DateTime.Today.AddHours(12), Text = "Online meeting" },
        new Appointment { Start = DateTime.Today.AddHours(10), End = DateTime.Today.AddHours(13), Text = "Skype call" },
        new Appointment { Start = DateTime.Today.AddHours(14), End = DateTime.Today.AddHours(14).AddMinutes(30), Text = "Dentist appointment" },
        new Appointment { Start = DateTime.Today.AddDays(1), End = DateTime.Today.AddDays(12), Text = "Vacation" },
    };

    void OnSlotRender(SchedulerSlotRenderEventArgs args)
    {
        // Highlight today in month view
        if (args.View.Text == "Month" && args.Start.Date == DateTime.Today)
        {
            args.Attributes["style"] = "background: rgba(255,220,40,.2);";
        }

        // Highlight working hours (9-18)
        if ((args.View.Text == "Week" || args.View.Text == "Day") && args.Start.Hour > 9 && args.Start.Hour < 17)
        {
            args.Attributes["style"] = "background: rgba(255,220,40,.2);";
        }
    }

    async Task OnSlotSelect(SchedulerSlotSelectEventArgs args)
    {


        if (args.View.Text != "Year")
        {
            Appointment data = await DialogService.OpenAsync<AddAppointment>("Add Appointment",
                new Dictionary<string, object> { { "Start", args.Start }, { "End", args.End } });

            if (data != null)
            {
                appointments.Add(data);
                // Either call the Reload method or reassign the Data property of the Scheduler
                await scheduler.Reload();
            }
        }
    }

    async Task OnAppointmentSelect(SchedulerAppointmentSelectEventArgs<Appointment> args)
    {


        var copy = new Appointment
            {
                Start = args.Data.Start,
                End = args.Data.End,
                Text = args.Data.Text
            };

        var data = await DialogService.OpenAsync<EditAppointment>("Edit Appointment", new Dictionary<string, object> { { "Appointment", copy } });

        if (data != null)
        {
            // Update the appointment
            args.Data.Start = data.Start;
            args.Data.End = data.End;
            args.Data.Text = data.Text;
        }

        await scheduler.Reload();
    }

    void OnAppointmentRender(SchedulerAppointmentRenderEventArgs<Appointment> args)
    {
        // Never call StateHasChanged in AppointmentRender - would lead to infinite loop

        if (args.Data.Text == "Birthday")
        {
            args.Attributes["style"] = "background: red";
        }
    }

    


    
    
}
