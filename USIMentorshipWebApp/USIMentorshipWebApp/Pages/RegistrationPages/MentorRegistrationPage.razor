@page "/mentor-registration"
@layout NotLoggedInLayout

@inject NavigationManager NavigationManager
@inject DialogService DialogService
@inject RegistrationDataService RegistrationDataService
@inject UserService UserService

@using USIMentorshipWebApp.Models;
@using USIMentorshipWebApp.Data;
@using USIMentorshipWebApp.Shared.Dropdowns;


<div class="default-margin">

        <PageTitle>Mentor Sign Up - USI Mentorship Program</PageTitle>

        <h1>Sign up as a Mentor</h1>
        <h3>General Information:</h3>


        <RadzenTemplateForm TItem="User" Data="@user" Submit="@OnSubmit">
            @* FIRSTNAME, LASTNAME *@
            <RadzenRow class="mb-4 mt-4" Gap="5">

                <RadzenStack Orientation="Orientation.Vertical">
                    <RadzenFormField Text="First Name:" AllowFloatingLabel="false" Variant=Variant.Flat>
                        <RadzenTextBox @bind-Value="@user.FirstName" Name="FirstName" />
                    </RadzenFormField>
                    <RadzenRequiredValidator Text="First name is required" Component="FirstName" />
                </RadzenStack>
                
            

                <RadzenStack Orientation="Orientation.Vertical">
                    <RadzenFormField Text="Last Name:" AllowFloatingLabel="false" Variant=Variant.Flat>
                        <RadzenTextBox @bind-Value="@user.LastName" Name="LastName" />
                    </RadzenFormField>
                    <RadzenRequiredValidator Text="Last name is required" Component="LastName" />
                </RadzenStack>
            </RadzenRow>

            @* EMAIL, PHONE NUMBER *@
            <RadzenRow class="mb-4" Gap="5">
                <RadzenStack Orientation="Orientation.Vertical">
                    <RadzenFormField Text="Email:" AllowFloatingLabel="false" Variant=Variant.Flat>
                        <RadzenTextBox @bind-Value="@user.EmailAddress" Name="EmailAddress" />
                     </RadzenFormField>
                    <RadzenRequiredValidator Text="Email address is required" Component="EmailAddress" />
                </RadzenStack>


                <RadzenStack Orientation="Orientation.Vertical">
                    <RadzenFormField Text="Phone Number:" AllowFloatingLabel="false" Variant=Variant.Flat>
                        <RadzenTextBox @bind-Value="@user.PhoneNumber" Name="PhoneNumber" />
                    </RadzenFormField>
                    <RadzenRequiredValidator Text="Phone number is required" Component="PhoneNumber" />
                </RadzenStack>
            </RadzenRow>

            @* LINKEDIN (its in its own row) *@
            <RadzenRow class="mb-4" Gap="5">
                <RadzenStack Orientation="Orientation.Vertical">
                    <RadzenFormField Text="LinkedIn Profile URL:" AllowFloatingLabel="false" Variant=Variant.Flat>
                        <RadzenTextBox @bind-Value="@user.LinkedInLink" Name="LinkedIn" />
                    </RadzenFormField>
                    <RadzenRequiredValidator Text="LinkedIn is required" Component="LinkedIn" />
                </RadzenStack>
            </RadzenRow>

            @* UPLOAD PROFILE PICTURE *@
            <RadzenRow class="mb-4">
                <RadzenUpload Url="upload/single" ChooseText="Upload Profile Picture" Style="width:180px; text-align:center;" Accept="image/*"></RadzenUpload>
            </RadzenRow>

            @* SCHOOL, MAJOR, MINOR, GRADUATION YEAR *@
            <h3>Education Information:</h3>
            <RadzenRow class="mb-4 mt-4" AlignItems="AlignItems.Center" Gap="5">
                <div class="our-column mb-2">
                    <label>School:</label>
                    <RadzenDropDown @bind-SearchText=@schoolsSearchText @bind-Value=@user.School
                                    AllowFiltering="true" Data=@schools FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                AllowClear="true" Style="max-width:190px;" Name="School" />
                    <RadzenRequiredValidator Text="School is Required" Component="School" />
                </div>


                <RadzenStack Orientation="Orientation.Vertical">
                
                    <RadzenFormField Text="Major:" AllowFloatingLabel="false" Variant=Variant.Flat>
                        <RadzenTextBox @bind-Value=@user.Major Name="Major" />
                    </RadzenFormField>
                    <RadzenRequiredValidator Text="Major is required" Component="Major" />

                </RadzenStack>

                <RadzenStack Orientation="Orientation.Vertical">

                    <RadzenFormField Text="Minor:" AllowFloatingLabel="false" Variant=Variant.Flat>
                        <RadzenTextBox @bind-Value="@user.Minor" Name="Minor" />
                    </RadzenFormField>
                    <RadzenRequiredValidator Text="Minor is required" Component="Minor" />

                </RadzenStack>

                <div class="our-column mb-2">
                    <label>Graduation Date:</label>
                    <RadzenDatePicker @bind-Value=@user.GraduationYear Name="GraduationDate" ShowCalendarWeek DateFormat="MM/yyyy" Min="DateTime.Today.AddYears(-110)" Max="DateTime.Today.AddYears(30)" />
                <RadzenRequiredValidator Text="Graduation Date is required" Component="GraduationDate" />
                </div>
            </RadzenRow>

            @* INDUSTRY, CURRENT POSITION, COMPANY, BUSINESS LOCATION, *@
            <h3>Job and Industry Information:</h3>
            <RadzenRow class="mb-4" AlignItems="AlignItems.Center" Gap="5">
                <div class="our-column mb-2">
                    <label>Industry:</label>
                    <RadzenDropDown @bind-SearchText=@industriesSearchText @bind-Value=@user.Industry
                                    AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                    Data=@industries AllowClear="true" Style="max-width:190px;" Name="Industry" />
                    <RadzenRequiredValidator Text="Industry is Required" Component="Industry" />
    
                </div>

                <div class="our-column mb-2">
                    <label>Current Position:</label>
                    <RadzenDropDown @bind-SearchText=@jobTitlesSearchText @bind-Value=@user.CurrentPosition
                                    AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                    Data=@jobTitles AllowClear="true" Style="max-width:190px;" Name="CurrentPosition"/>
                    <RadzenRequiredValidator Text="Current Position is Required" Component="CurrentPosition" />

                </div>
            

                <RadzenStack Orientation="Orientation.Vertical">

                    <RadzenFormField Text="Company:" AllowFloatingLabel="false" Variant=Variant.Flat>
                        <RadzenTextBox @bind-Value="@user.Company" Name="Company" />
                    </RadzenFormField>
                    <RadzenRequiredValidator Text="Company name required" Component="Company" />
            
                </RadzenStack>

             </RadzenRow>

            <RadzenRow class="mb-4 mt-4" AlignItems="AlignItems.Center" Gap="5">
                <BusinessLocationDropdown @ref="businessLocationDropdown"/>
            @*  <RadzenRequiredValidator Text="Business city and state is required" Component="BusinessLocation" />  *@

            </RadzenRow>


            @* BIRTHDATE, SELF-INTRODUCTION, MENTEES PER SEMESTER *@
            <h3>Further Profile Info</h3>
            <h6>Some of this information will be used in your profile for students to see</h6>
            <RadzenRow class="mb-4 mt-4" Gap="5" AlignItems="AlignItems.Center">
                <div class="our-column">
                    <RadzenLabel Text="Birthdate:" Style="margin-right: 4px; vertical-align: middle;" />
                    <RadzenDatePicker @bind-Value=@user.DateOfBirth Name="DateOfBirth" ShowCalendarWeek DateFormat="MM/dd/yyyy" Min="DateTime.Today.AddYears(-110)" Max="DateTime.Today.AddYears(-18)" />
                <RadzenRequiredValidator Text="Date of birth is required" Component="DateOfBirth" />
                </div>
            </RadzenRow>

            <div class="our-column mb-2">
                <label>Gender:</label>
                <RadzenDropDown @bind-Value=@user.Gender Data=@genders Style="max-width:160px;" Name="Gender" />
                <RadzenRequiredValidator Text="Please choose one of the gender specifications" Component="Gender" />

            </div>

        <RadzenRow class="mb-4 mt-4" Gap="25">
            <div class="our-column">
                @*<label>Self-Introduction</label> *@
                <RadzenFormField Text="Self Introduction:" AllowFloatingLabel="false" Variant=Variant.Flat>
                    <RadzenTextArea @bind-Value=@user.Bio Name="Bio" Cols="55" Rows="6" aria-label=Self-Introduction: />
                </RadzenFormField>
                <RadzenRequiredValidator Text="Please enter a bio about yourself" Component="Bio" />
            </div>
        </RadzenRow>

            <RadzenRow class="mb-4 mt-4" Gap="5">
                <div class="our-column mb-2">
                    <label>Mentees Per Semester:</label>
                <RadzenDropDown @bind-Value=@user.MenteesPerSemester Name="NumberOfMentees" Data=@MenteesPerSemesterOptions Style="max-width:160px;" />
                    <RadzenRequiredValidator Text="Please choose a number of mentees" Component="NumberOfMentees" />
   
                    <label>Mentees will not see this preference.</label>
                </div>
            </RadzenRow>





            @* PASSWORD *@
            <RadzenRow class="mb-4 mt-4" Gap="5">
                <RadzenStack Orientation="Orientation.Vertical">
                    <RadzenFormField Text="Password" AllowFloatingLabel="false">
                        <RadzenPassword @bind-Value="@user.Password" Name="Password" />
                    </RadzenFormField>
                    <RadzenRequiredValidator Text="Password is required" Component="Password" />
                    <RadzenLengthValidator Min="6" Text="Password must be at least 6 characters long" Component="Password" />
                </RadzenStack>


           

            @* CONFIRM PASSWORD  *@
                <RadzenStack Orientation="Orientation.Vertical">
                    <RadzenFormField Text="Confirm Password" AllowFloatingLabel="false">
                        <RadzenPassword @bind-Value="@user.RepeatPassword" Name="ConfirmPassword" />
                    </RadzenFormField>
                    <RadzenRequiredValidator Text="Confirming password is required" Component="ConfirmPassword" />
                    <RadzenCompareValidator Text="Passwords do not match" Value=@user.Password Component="ConfirmPassword" Visible=@(!string.IsNullOrEmpty(user.RepeatPassword)) />
                </RadzenStack>

            </RadzenRow>
       
        
            @* REGISTER, BACK TO LOGIN *@
            <RadzenRow>
                <RadzenButton Style="width:100px; font-size:14px;" Variant="Variant.Outlined" ButtonType="ButtonType.Submit" ButtonStyle="ButtonStyle.Secondary"  Text="Register" />
                <RadzenButton Style="width:100px; font-size:14px;" Variant="Variant.Outlined" ButtonStyle="ButtonStyle.Secondary" Click="@GoToLogin" Text="Back To Login" />
            </RadzenRow>


        </RadzenTemplateForm>


</div>




@code {
    private User user = new User();
    BusinessLocationDropdown businessLocationDropdown;



    private string schoolsSearchText = "";
    private string industriesSearchText = "";// Add this line
    private string jobTitlesSearchText = "";
    private string? confirmPassword { get; set; }



    public List<string> industries = new List<string>();
    public List<string> jobTitles = new List<string>();
    public List<string> schools = new List<string>();
    // Assuming genders and menteesPerSemesterOptions are static, else fetch similarly
    public List<string> genders = new List<string> { "Male", "Female", "Other" };
    public List<int> MenteesPerSemesterOptions = new List<int> { 1, 2, 3, 4, 5 };

    protected override async Task OnInitializedAsync()
    {
        industries = await RegistrationDataService.GetIndustriesAsync();
        jobTitles = await RegistrationDataService.GetJobTitlesAsync();
        schools = await RegistrationDataService.GetSchoolsAsync();
    }


    private async Task OnSubmit()
    {
        // Check if passwords match

            // Assume AddUser is updated to handle async operation if necessary
            await UserService.AddUserAsync(user, "Mentor");
            NavigationManager.NavigateTo("/mentor-match");
        

    }

    // Removed unused variables and methods for brevity




    void GoToNextPage(MouseEventArgs args)
    {
        // needs to make the user account by populating
        NavigationManager.NavigateTo("/mentor-match");
    }

    void GoToLogin(MouseEventArgs args)
    {
        NavigationManager.NavigateTo("/");
    }

}