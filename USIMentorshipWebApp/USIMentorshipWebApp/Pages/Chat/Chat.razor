@page "/Chat"
@layout MainLayout
@using USIMentorshipWebApp.Data;
@using USIMentorshipWebApp.Models;
@inject UserService userService; 
@inject ChatService chatService;

<PageTitle>Chat - USI Mentorship Program</PageTitle>

<!--row-->
<div style="display:flex; align-items:stretch;">
    <!--SIDEBAR FOR CHATS-->
    <!--Column-->
    <div class="@SidebarCssClass sidebar-appear-over height-scrollable">
        @* X BUTTON *@
        <div @onclick="ToggleNavMenu" style="text-align:right;">
            <span style="font-size:20px;"class="oi oi-x"></span>
        </div>

        @* CHAT HEADING*@
        <h1>Chat</h1>
        <h6>Get started chatting with mentors below!</h6>

        @if (userSidebarCardData != null)
        {
            foreach (var sidebarData in userSidebarCardData)
            {
                <UserChatSidebarCard usersInMatch="sidebarData.UsersInMatch" mostRecentChat="sidebarData.MostRecentChat" OnCardClick="HandleCardClick" />
            }
        }
        else
        {

        }

    </div>

    @if (IsCollapsed == true)
    {
        @* MENU BUTTON *@
        <div class="small-sidebar">
            <div @onclick="ToggleNavMenu" style="text-align:right; font-size:28px;">
                <span class="oi oi-chat"></span>
            </div>
        </div>
    }

<!--MESSAGES-->
    <!--column-->
    <div class="main-column">
        <!--row-->
        <div class="messages-column height-scrollable">    
            @if (UserMessagesData != null)
            {
                foreach (UserMessages displayObject in UserMessagesData)
                {
                    if (displayObject.user.UserId == loggedInUser.UserId)
                    {
                        <LoggedInUserMessage user="displayObject.user" chat="displayObject.userMessage" />
                    }
                    else
                    {
                        <OtherUserMessage user="displayObject.user" chat="displayObject.userMessage" />
                    }
                }
            }
        </div>
        
        <div class="main-column-input" style="padding:5px;">
            <RadzenStack Orientation="Orientation.Horizontal">
                <RadzenTextArea MaxLength="300" @bind-Value=@inputtedMessage class="w-100" aria-label="TextArea with 300 maximum characters" />
                <RadzenButton Style="width:80px; font-size:14px;" Variant="Variant.Outlined" ButtonStyle="ButtonStyle.Secondary" Click=@SendChat Text="Send" />
            </RadzenStack>
            <h6 class="side-note">Note: If you don't immediately see a message, refresh the page</h6>
        </div>
    </div>


</div>

@code {
    User loggedInUser;

    List<int> userMatchIdsWithChats;

    (List<List<User>>, List<MatchCommunicationDetail>) result;

    List<User> sidebarUsers;

    MatchCommunicationDetail mostRecentChat;

    List<SidebarUserCard> userSidebarCardData;

    public int _matchId;

    List<UserMessages> UserMessagesData;

    protected override async Task OnInitializedAsync()
    {

        // set the logged in User to example mentee 
        loggedInUser = await userService.GetExampleMenteeUser();

        userSidebarCardData = await chatService.GetSidebarUserCardData(loggedInUser);

    }

    private async void HandleCardClick(int matchId)
    {
        _matchId = matchId;
        // Now you can use _matchId in your parent component
        // For example, you can pass it to another method
        UserMessagesData = await chatService.GetUserMessagesData(_matchId);
        await InvokeAsync(StateHasChanged);
    }

    public string inputtedMessage;

    #region Collapsing the Sidebar
    private bool IsCollapsed = false;

    private string? SidebarCssClass => IsCollapsed ? "dont-show" : "sidebar";

    private void ToggleNavMenu()
    {
        IsCollapsed = !IsCollapsed;
    }
    #endregion

    public async Task SendChat()
    {
        chatService.SendChat(_matchId, inputtedMessage, loggedInUser.UserId);
        UserMessagesData = await chatService.GetUserMessagesData(_matchId);
        await InvokeAsync(StateHasChanged);
        inputtedMessage = "";
    }
}

